// 2021-03-26 jpsl - based on https://medium.com/@amcdnl/version-stamping-your-app-with-the-angular-cli-d563284bb94d
const { gitDescribeSync } = require('git-describe');
const { version } = require('../package.json');
const { resolve, relative } = require('path');
const fs = require('fs');
const fsExtra = require('fs-extra');

const gitInfo = gitDescribeSync({
    dirtyMark: false,
    dirtySemver: false
});

gitInfo.version = version;

const ctrDsuWizardVersionFile = resolve(__dirname, '..', 'ctr-dsu-wizard', 'version.js');
fsExtra.writeFileSync(ctrDsuWizardVersionFile,
`// IMPORTANT: THIS FILE IS AUTO GENERATED BY bin/version.js - DO NOT MANUALLY EDIT OR CHECKIN!
const VERSION = ${JSON.stringify(gitInfo, null, 4)};

module.exports = VERSION;
`, { encoding: 'utf-8' });

console.log(`Wrote version info ${gitInfo.raw} to ${relative(resolve(__dirname, '..'), ctrDsuWizardVersionFile)}`);

const trustLoaderPatientEnvFile = resolve(__dirname, '..', 'trust-loader-config', 'patient-ssapp', 'loader', 'environment.js');
fs.readFile(trustLoaderPatientEnvFile, 'utf8', function (err, data) {
    if (err)
        return console.log(err);
    var result = data.replace(
        /  \"appVersion\": \".*\",/g,
        '  \"appVersion\": \"'+gitInfo.version+"-"+gitInfo.hash+'\",');
    fs.writeFile(trustLoaderPatientEnvFile, result, 'utf8', function (err) {
        if (err) return console.log(err);
    });
});
console.log(`Wrote version info ${gitInfo.raw} to ${relative(resolve(__dirname, '..'), trustLoaderPatientEnvFile)}`);

const apiHubIndexHtmlFile = resolve(__dirname, '..', 'apihub-root', 'index.html');
fs.readFile(apiHubIndexHtmlFile, 'utf8', function (err, data) {
    if (err)
        return console.log(err);
    var result = data.replace(
        /<!-- VERSION_START -->.*<!-- VERSION_END -->/g,
        '<!-- VERSION_START -->'+gitInfo.version+"-"+gitInfo.hash+'<!-- VERSION_END -->');
    fs.writeFile(apiHubIndexHtmlFile, result, 'utf8', function (err) {
        if (err) return console.log(err);
    });
});
console.log(`Wrote version info ${gitInfo.raw} to ${relative(resolve(__dirname, '..'), apiHubIndexHtmlFile)}`);

// files under apihub-root/doc-root are setup by the Dockerfile, and may not exist in a developer's directory

const landingIndexHtmlFile = resolve(__dirname, '..', 'apihub-root', 'doc-root', 'index.html');
if ( fs.existsSync(landingIndexHtmlFile) ) {
    fs.readFile(landingIndexHtmlFile, 'utf8', function (err, data) {
        if (err)
            return console.log(err);
        var result = data.replace(
            /\'..\/patient-ssapp\/loader\/'/g,
            '\'../patient-ssapp/loader/?v='+gitInfo.version+'\'');
        fs.writeFile(landingIndexHtmlFile, result, 'utf8', function (err) {
            if (err) return console.log(err);
        });
    });
    console.log(`Wrote version info ${gitInfo.raw} to ${relative(resolve(__dirname, '..'), landingIndexHtmlFile)}`);    
}
else {
    console.log(`Not found ${relative(resolve(__dirname, '..'), landingIndexHtmlFile)}`);
}

const landingPatientHtmlFile = resolve(__dirname, '..', 'apihub-root', 'doc-root', 'patients.html');
if ( fs.existsSync(landingPatientHtmlFile) ) {
    fs.readFile(landingPatientHtmlFile, 'utf8', function (err, data) {
        if (err)
            return console.log(err);
        var result = data.replace(
            /\'..\/patient-ssapp\/loader\/'/g,
            '\'../patient-ssapp/loader/?v='+gitInfo.version+'\'');
        fs.writeFile(landingPatientHtmlFile, result, 'utf8', function (err) {
            if (err) return console.log(err);
        });
    });
    console.log(`Wrote version info ${gitInfo.raw} to ${relative(resolve(__dirname, '..'), landingPatientHtmlFile)}`);    
}
else {
    console.log(`Not found ${relative(resolve(__dirname, '..'), landingPatientHtmlFile)}`);
}
