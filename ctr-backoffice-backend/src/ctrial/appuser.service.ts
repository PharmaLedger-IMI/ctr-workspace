
import { v4 as uuidv4 } from 'uuid';
import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { Connection } from 'typeorm';
import { AppUser } from './appuser.entity';
import { ClinicalSite } from './clinicalsite.entity';
import { ClinicalSiteUser } from './clinicalsiteuser.entity';
import { Sponsor } from './sponsor.entity';
import { SponsorUser } from './sponsoruser.entity';

@Injectable()
export class AppUserService {
    constructor(
        private connection: Connection,
    ) { }

    /**
     * Find an active user by username.
     * @param auUsername 
     * @returns an array of AppUser. An empty array if not found.
     */
    async findByUsername(auUsername: string): Promise<AppUser[]> {
        console.log("auService.findByUsername au.username=", auUsername);
        let whereOpts = [
            { username: auUsername },
        ];
        let auCollection = await AppUser.find({ where: whereOpts, order: { id: "DESC" } });
        return auCollection;
    }

    /**
     * Sing up a new user.
     * @param auJson a parsed JSON object suitable for an AppUser. Must have extra sponsorId or clinicalSiteId properties.
     * @returns AppUser
     * @throws error is the user already exists.
     */
    async signUp(auJson: any): Promise<AppUser> {
        const au = await this.newFromParsedJson(auJson);
        const auCollection = await this.findByUsername(auJson.username);
        if (auCollection.length > 0) {
            throw new HttpException('Username '+auJson.username+' already signed up!', HttpStatus.INTERNAL_SERVER_ERROR);
        }
        const newAu = await au.save(); // autocommit is good enough ?
        return newAu;
    }

    /**
     * Transform a parsed JSON from an AppUser into a proper AppUser instance.
     * @param jsonAppUser a parsed JSON from an AppUser. Must include one of clinicalSiteId, sponsorId. 
     */
    async newFromParsedJson(jsonAppUser: any): Promise<AppUser> {
        let newAu;
        if (jsonAppUser.clinicalSiteId) {
            const csRepository = this.connection.getRepository(ClinicalSite);
            let cs;
            try {
                cs = await csRepository.findOneOrFail(jsonAppUser.clinicalSiteId);
            } catch (err) {
                throw new HttpException(err, HttpStatus.INTERNAL_SERVER_ERROR);
            }
            newAu = new ClinicalSiteUser();
            newAu.clinicalSite = cs;
        } else if (jsonAppUser.sponsorId) {
            const spRepository = this.connection.getRepository(Sponsor);
            let sp;
            try {
                sp = await spRepository.findOneOrFail(jsonAppUser.sponsorId);
            } catch (err) {
                throw new HttpException(err, HttpStatus.INTERNAL_SERVER_ERROR);
            }
            newAu = new SponsorUser();
            newAu.sponsor = sp;
        } else {
            throw 'No properties clinicalSiteId neither sponsorId';
        }

        newAu.id=uuidv4(); // should be autogenerated, but it is not working
        newAu.firstName = jsonAppUser.firstName;
        newAu.lastName = jsonAppUser.lastName;
        newAu.username = jsonAppUser.username;
        newAu.passHash = jsonAppUser.password;

        /* DOES NOT WORK! Why ?
        for(var prop in jsonAppUser) {
            if(! (prop in newAu)) {
                console.log("Not in "+newAu.constructor.name+" prop "+prop);
                continue;
            }
            if(!jsonAppUser.hasOwnProperty(prop)) {
                console.log("Not in JSON prop "+prop);
                continue;
            }
            if(typeof jsonAppUser[prop] === 'object') {
                console.log("Ignoring prop "+prop);
            } else {
                newAu[prop] = jsonAppUser[prop];
            }
        }
        */
        return newAu;
    }
}
